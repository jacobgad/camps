// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Camp {
  id             String          @id @default(cuid())
  title          String
  description    String
  itineraryItems ItineraryItem[]
  Room           Room[]
  users          User[]
}

model ItineraryItem {
  id              Int               @id @default(autoincrement())
  title           String
  description     String
  date            DateTime
  camp            Camp              @relation(fields: [campId], references: [id])
  campId          String
  itineraryOption ItineraryOption[]
}

model ItineraryOption {
  id              Int           @id @default(autoincrement())
  title           String
  description     String
  capacity        Int
  users           User[]
  itineraryItem   ItineraryItem @relation(fields: [itineraryItemId], references: [id])
  itineraryItemId Int
}

model Room {
  id       Int    @id @default(autoincrement())
  name     String
  capacity Int
  camp     Camp   @relation(fields: [campId], references: [id])
  campId   String
  users    User[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  phone            String?
  dob              DateTime?
  gender           Gender?
  accounts         Account[]
  sessions         Session[]
  camps            Camp[]
  itineraryOptions ItineraryOption[]
  rooms            Room[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  male
  female
}
